#!/usr/bin/env node

/**
 * Module dependencies.
 */

const debug = require('debug')('nodepop:server');
const http = require('http');
const https = require('https');
const fs = require('fs');
const app = require('../app');
const { PORT, LOCALHOST } = require('../lib/config');

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(PORT || '3001');
app.set('port', port);

/**
 * Event listener for HTTP/HTTPS server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string' ? `Pipe ${port}` : `Port ${port}`;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(`${bind} requires elevated privileges`);
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(`${bind} is already in use`);
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Redirect HTTP to HTTPS server
 */

// http
//   .createServer((req, res) => {
//     res.writeHead(301, {
//       Location: `https://${req.headers['host']}${req.url}`
//     });
//     res.end();
//   })
//   .listen(80)
//   .on('error', onError);

/**
 * Create HTTPS server.
 */

const options = {
  key: fs.readFileSync('./certificates/localhost+2-key.pem'),
  cert: fs.readFileSync('./certificates/localhost+2.pem')
};
// TODO Fix next line, use it just in develop environment
process.env['NODE_TLS_REJECT_UNAUTHORIZED'] = '0';
const server = https.createServer(options, app);

/**
 * Event listener for HTTPS server "listening" event.
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string' ? `pipe ${addr}` : `port ${addr.port}`;
  debug(`Listening on ${bind}`);
  console.log(`Access server on ${LOCALHOST}`);
}

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);
